import kotlin.String;
import kotlin.Boolean;
import kotlin.Pair;
import kotlin.collections.List;
import kotlin.collections.Map;

CREATE TABLE Subscriptions (
   id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
   request_id INTEGER UNIQUE NOT NULL,
   key_agreement_topic TEXT NOT NULL,
   response_topic TEXT NOT NULL,
   dapp_public_key TEXT DEFAULT NULL,
   topic TEXT,
   account TEXT NOT NULL,
   relay_protocol TEXT NOT NULL,
   relay_data TEXT,
   metadata_name TEXT NOT NULL,
   metadata_description TEXT NOT NULL,
   metadata_url TEXT NOT NULL,
   metadata_icons TEXT AS List<String> NOT NULL,
   metadata_native TEXT,
   did_jwt TEXT NOT NULL,
   map_of_scope TEXT AS Map<String, Pair<String, Boolean>> NOT NULL,
   expiry INTEGER NOT NULL
);

insertSubscription:
INSERT OR REPLACE INTO Subscriptions(request_id, key_agreement_topic, response_topic, dapp_public_key, topic, account, relay_protocol, relay_data, metadata_name, metadata_description, metadata_url, metadata_icons, metadata_native, did_jwt, map_of_scope, expiry)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

getAllSubscriptions:
SELECT request_id, key_agreement_topic, response_topic, dapp_public_key, topic, account, relay_protocol, relay_data, metadata_name, metadata_description, metadata_url, metadata_icons, metadata_native, did_jwt, map_of_scope, expiry
FROM Subscriptions;

getSubscriptionByTopic:
SELECT request_id, key_agreement_topic, response_topic, dapp_public_key, topic, account, relay_protocol, relay_data, metadata_name, metadata_description, metadata_url, metadata_icons, metadata_native, did_jwt, map_of_scope, expiry
FROM Subscriptions
WHERE topic = ?;

getSubscriptionByRequestId:
SELECT request_id, key_agreement_topic, response_topic, dapp_public_key, topic, account, relay_protocol, relay_data, metadata_name, metadata_description, metadata_url, metadata_icons, metadata_native, did_jwt, map_of_scope, expiry
FROM Subscriptions
WHERE request_id = ?;

updateSubscriptionToResponded:
UPDATE OR REPLACE Subscriptions
SET topic = ?, did_jwt = ?, expiry = ?
WHERE response_topic = ?;

updateSubscriptionWithDappPublicKeyToResponded:
UPDATE OR REPLACE Subscriptions
SET dapp_public_key = ?, topic = ?, expiry = ?
WHERE response_topic = ?;

updateSubscriptionScopeAndJwt:
UPDATE OR REPLACE Subscriptions
SET map_of_scope = ?, did_jwt = ?, expiry = ?
WHERE response_topic = ?;

deleteByTopic:
DELETE FROM Subscriptions
WHERE topic = ?;