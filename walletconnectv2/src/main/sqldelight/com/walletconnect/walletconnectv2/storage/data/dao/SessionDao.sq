import com.walletconnect.walletconnectv2.core.model.type.ControllerType;
import com.walletconnect.walletconnectv2.storage.sequence.SequenceStatus;
import kotlin.collections.List;

CREATE TABLE SessionDao(
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  topic TEXT UNIQUE NOT NULL,
  permissions_chains TEXT AS List<String> NOT NULL,
  permissions_methods TEXT AS List<String> NOT NULL,
  permissions_types TEXT AS List<String>,
  self_participant TEXT NOT NULL,
  peer_participant TEXT,
  controller_key TEXT,
  ttl_seconds INTEGER NOT NULL,
  accounts TEXT AS List<String> DEFAULT(NULL),
  expiry INTEGER NOT NULL,
  status TEXT AS SequenceStatus NOT NULL,
  controller_type TEXT AS ControllerType NOT NULL,
  metadata_id INTEGER,
  relay_protocol TEXT NOT NULL
);

insertSession:
INSERT OR IGNORE INTO SessionDao(topic, permissions_chains, permissions_methods, permissions_types, self_participant, ttl_seconds, expiry,  status, controller_type, metadata_id, relay_protocol)
VALUES (?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?);

getListOfSessionDaos:
SELECT sd.topic, sd.permissions_chains, sd.permissions_methods, sd.permissions_types, sd.ttl_seconds, sd.accounts, sd.expiry, sd.status, sd.controller_type, mdd._name, mdd.description, mdd.url, mdd.icons, sd.self_participant, sd.peer_participant, sd.controller_key, sd.relay_protocol
FROM SessionDao sd
    LEFT JOIN MetaDataDao mdd ON sd.metadata_id = mdd.id;

updateProposedSessionToResponded:
UPDATE OR ABORT SessionDao
SET status = ?
WHERE topic = ?;

updateRespondedSessionToPresettled:
UPDATE OR ABORT SessionDao
SET topic = ?, accounts = ?, expiry = ?, status = ?, self_participant = ?, controller_key = ?, peer_participant = ?, permissions_chains = ?, permissions_methods = ?, permissions_types = ?, ttl_seconds = ?
WHERE topic = ?;

updatePreSettledSessionToAcknowledged:
UPDATE OR ABORT SessionDao
SET status = ?
WHERE topic = ?;

updateProposedSessionToAcknowledged:
UPDATE OR ABORT SessionDao
SET topic = ?, accounts = ?, expiry = ?, status = ?, self_participant = ?, controller_key = ?, peer_participant = ?, permissions_chains = ?, permissions_methods = ?, permissions_types = ?, ttl_seconds = ?, relay_protocol = ?, metadata_id =?
WHERE topic = ?;

updateSessionWithPermissions:
UPDATE OR ABORT SessionDao
SET permissions_chains = ?, permissions_methods = ?
WHERE topic = ?;

updateSessionWithAccounts:
UPDATE OR ABORT SessionDao
SET accounts = ?
WHERE topic = ?;

deleteSession:
DELETE FROM SessionDao
WHERE topic = ?;

getPermissionsByTopic:
SELECT sd.permissions_chains, sd.permissions_methods
FROM SessionDao sd
    LEFT JOIN MetaDataDao mdd ON sd.metadata_id = mdd.id
WHERE topic = ?;

getSessionByTopic:
SELECT sd.topic, sd.permissions_chains, sd.permissions_methods, sd.permissions_types, sd.ttl_seconds, sd.accounts, sd.expiry, sd.status, sd.controller_type, mdd._name, mdd.description, mdd.url, mdd.icons, sd.self_participant, sd.peer_participant, sd.controller_key, sd.relay_protocol
FROM SessionDao sd
    LEFT JOIN MetaDataDao mdd ON sd.metadata_id = mdd.id
WHERE topic = ?;

hasTopic:
SELECT topic
FROM SessionDao
WHERE ? = topic;