import com.walletconnect.walletconnectv2.core.model.type.enums.ControllerType;
import com.walletconnect.walletconnectv2.storage.sequence.SequenceStatus;
import kotlin.collections.List;

CREATE TABLE PairingDao (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    topic TEXT UNIQUE NOT NULL,
    uri TEXT NOT NULL,
    expiry INTEGER NOT NULL,
    status TEXT AS SequenceStatus NOT NULL,
    self_participant TEXT NOT NULL,
    peer_participant TEXT,
    controller_key TEXT,
    relay_protocol TEXT NOT NULL,
    relay_data TEXT,
    permissions TEXT AS List<String>,
    metadata_id INTEGER,
    outcome_topic TEXT
);

insertPendingPairing:
INSERT OR IGNORE INTO PairingDao(topic, uri, expiry, status, self_participant, relay_protocol,  relay_data, outcome_topic)
VALUES (?, ?, ?, ?,    ?, ?, ?, ?);

getListOfPairingDaos:
SELECT pd.topic, pd.expiry, pd.uri, pd.status, pd.self_participant, pd.peer_participant, pd.controller_key, pd.relay_protocol, pd.relay_data, pd.permissions, mdd._name, mdd.description, mdd.url, mdd.icons
FROM PairingDao pd
    LEFT JOIN MetaDataDao mdd ON pd.metadata_id = mdd.id;

updatePreSettledPairingToAcknowledged:
UPDATE PairingDao
SET status = ?
WHERE topic = ?;

deletePairing:
DELETE FROM PairingDao
WHERE ? = topic;

getPairingByTopic:
SELECT topic, expiry, uri, status, self_participant, peer_participant, controller_key, relay_protocol, relay_data, permissions, outcome_topic
FROM PairingDao
WHERE ? = topic;

updateAcknowledgedPairingMetadata:
UPDATE PairingDao
SET metadata_id = ?
WHERE topic = ?;

hasTopic:
SELECT topic
FROM PairingDao
WHERE ? = topic;

getExpiry:
SELECT expiry
FROM PairingDao
WHERE ? = topic;