import com.walletconnect.chat.common.model.InviteStatus;
import com.walletconnect.chat.common.model.InviteType;

CREATE TABLE Invites (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    inviteId INTEGER UNIQUE NOT NULL,
    message TEXT NOT NULL,
    inviterAccount TEXT NOT NULL,
    inviteeAccount TEXT NOT NULL,
    status TEXT AS InviteStatus NOT NULL, -- PENDING, REJECTED OR APPROVED
    type TEXT AS InviteType NOT NULL, -- SENT OR RECEIVED
    inviterPublicKey TEXT NOT NULL,
    inviteePublicKey TEXT NOT NULL,
    acceptTopic TEXT NOT NULL,
    UNIQUE(inviterAccount, inviteeAccount)
);

insertOrAbortInvite:
INSERT OR ABORT INTO Invites(inviteId, message, inviterAccount, inviteeAccount, status, type, inviterPublicKey, inviteePublicKey, acceptTopic)
VALUES (?, ?, ?, ?, ?,?, ?, ?,?);

checkIfAccountsHaveExistingInvite:
SELECT EXISTS (
    SELECT 1
    FROM Invites
    WHERE inviterAccount = ? AND inviteeAccount = ?
    LIMIT 1
);

updateInviteStatus:
UPDATE Invites
SET status = ?
WHERE inviteId = ?;

deleteInviteByInviteId:
DELETE FROM Invites
WHERE inviteId = ?;

getInviteByInviteId:
SELECT inviteId, message, inviterAccount, inviteeAccount, status, inviterPublicKey, inviteePublicKey, acceptTopic
FROM Invites
WHERE inviteId = ?;

getAllPendingSentInvites:
SELECT inviteId, message, inviterAccount, inviteeAccount, status, inviterPublicKey, inviteePublicKey, acceptTopic
FROM Invites
WHERE status = 'PENDING' AND type = 'SENT';

-- SentInvites
getSentInvitesForInviterAccount:
SELECT inviteId, message, inviterAccount, inviteeAccount, status, inviterPublicKey, inviteePublicKey, acceptTopic
FROM Invites
WHERE inviterAccount = ? AND type = 'SENT';

-- ReceivedInvites
getReceivedInvitesForInviteeAccount:
SELECT inviteId, message, inviterAccount, inviteeAccount, status, inviterPublicKey, inviteePublicKey, acceptTopic
FROM Invites
WHERE inviteeAccount = ? AND type = 'RECEIVED';